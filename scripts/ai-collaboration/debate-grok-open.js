#!/usr/bin/env node

/**
 * Debate abierto CON Grok - Le damos la palabra para que cuestione H1SDR
 */

require('dotenv').config();
const { chromium } = require('playwright');
const AIAdapters = require('./ai-adapters');

async function openDebateWithGrok() {
    console.log('ü§ñ Claude abriendo debate abierto CON Grok sobre H1SDR...\n');

    let browser, adapters;

    try {
        browser = await chromium.connectOverCDP('http://localhost:9222');
        console.log('‚úÖ Conectado a navegador\n');

        const contexts = browser.contexts();
        const page = contexts[0].pages()[0];

        if (!page.url().includes('grok.com')) {
            await page.goto('https://grok.com', { waitUntil: 'load', timeout: 30000 });
            await page.waitForTimeout(5000);
        }

        console.log(`üìç En: ${page.url()}\n`);

        adapters = new AIAdapters(browser, page);

        const prompt = `Grok, ahora es tu turno. Hemos debatido arquitectura, pero H1SDR tiene muchos m√°s aspectos. Te presento el estado actual del proyecto:

**H1SDR v1.0 - Estado Actual:**

**Backend (Python FastAPI):**
\`\`\`
src/web_sdr/
‚îú‚îÄ‚îÄ main.py              # FastAPI server, WebSocket streams
‚îú‚îÄ‚îÄ config.py            # 16 band presets (H1, OH lines, amateur, broadcast)
‚îú‚îÄ‚îÄ controllers/         # RTL-SDR hardware interface
‚îú‚îÄ‚îÄ dsp/                 # FFTW FFT, AM/FM/USB/LSB/CW demod
‚îú‚îÄ‚îÄ services/            # WebSocket connection management
‚îî‚îÄ‚îÄ models/              # Pydantic data models
\`\`\`

**Frontend (HTML5/WebGL):**
\`\`\`
web/
‚îú‚îÄ‚îÄ index.html           # Monolithic UI (all controls in one page)
‚îú‚îÄ‚îÄ js/
‚îÇ   ‚îú‚îÄ‚îÄ init.js          # Initialization, event handlers (1800+ lines)
‚îÇ   ‚îú‚îÄ‚îÄ config.js        # Band configurations
‚îÇ   ‚îú‚îÄ‚îÄ components/      # Spectrum, waterfall, controls
‚îÇ   ‚îú‚îÄ‚îÄ services/        # WebSocket client, audio
‚îÇ   ‚îî‚îÄ‚îÄ audio-worklet.js # Web Audio API processing
‚îî‚îÄ‚îÄ css/                 # Styling
\`\`\`

**Caracter√≠sticas Actuales:**
- ‚úÖ Real-time spectrum @ 20 FPS (FFTW 4096 FFT)
- ‚úÖ 5 demod modes funcionales sin dropouts
- ‚úÖ WebGL visualization fluida
- ‚úÖ 16 bandas preset
- ‚úÖ Scanner FM autom√°tico
- ‚úÖ Frequency control coherente (single source of truth)
- ‚úÖ Resizable layout
- ‚úÖ Playwright automation para testing

**Problemas Conocidos:**
- ‚ö†Ô∏è init.js es gigante (1800 lines) - mantenibilidad
- ‚ö†Ô∏è No hay recording/playback
- ‚ö†Ô∏è No hay RFI rejection
- ‚ö†Ô∏è No hay export FITS
- ‚ö†Ô∏è Frontend no usa framework (vanilla JS)
- ‚ö†Ô∏è No hay state management formal
- ‚ö†Ô∏è WebSocket reconnection manual
- ‚ö†Ô∏è No hay tests unitarios (solo E2E con Playwright)

**AHORA TE TOCA A TI:**

**1. ¬øQu√© aspectos NO hemos debatido que son cr√≠ticos?**
   - Frontend architecture? (¬øReact? ¬øVue? ¬øVanilla?)
   - Testing strategy?
   - Deployment? (Docker, systemd?)
   - Security?
   - Documentation?
   - Performance profiling?

**2. ¬øQu√© preguntas DEBER√çAS hacerme sobre el dise√±o actual?**
   - ¬øCosas que no tienen sentido?
   - ¬øDecisiones cuestionables?
   - ¬øMissing features obvios?

**3. ¬øQu√© opinas del c√≥digo existente que viste en la sesi√≥n anterior?**
   - init.js con 1800 lines
   - Estructura de directorios
   - Separaci√≥n de responsabilidades

**4. Si tuvieras que revisar este proyecto como code reviewer, ¬øcu√°les ser√≠an tus 5 comentarios principales?**

**5. ¬øQu√© aspectos de radioastronom√≠a espec√≠ficos estamos ignorando?**
   - Calibraci√≥n?
   - Doppler correction autom√°tica?
   - Integration time optimization?
   - Baseline correction?

**TU TURNO:** Hazme las preguntas inc√≥modas. Critica lo que no te guste. Se√±ala lo que falta. S√© el arquitecto senior que revisa mi c√≥digo.

No te limites a responder - **CUESTIONA, PREGUNTA, DEBATE**.`;

        console.log('üì§ Enviando apertura de debate a Grok...\n');
        console.log('‚îÅ'.repeat(60));
        console.log(prompt);
        console.log('‚îÅ'.repeat(60));
        console.log('\n‚è≥ Esperando preguntas y cr√≠ticas de Grok...\n');

        const result = await adapters.grokAdapter(prompt, {
            maxRetries: 1,
            navigationTimeout: 30000,
            responseTimeout: 180000
        });

        console.log('\n' + '‚ïê'.repeat(60));
        if (result.success) {
            console.log('‚úÖ PREGUNTAS Y CR√çTICAS DE GROK:');
            console.log('‚ïê'.repeat(60));
            console.log(result.response);
            console.log('‚ïê'.repeat(60));
        } else {
            console.log('‚ùå Error:', result.error);
            console.log('‚ïê'.repeat(60));
        }

        console.log('\nüí¨ Debate abierto iniciado.');
        console.log('   Presiona Ctrl+C para salir.\n');

        await new Promise(() => {});

    } catch (error) {
        console.error('\n‚ùå Error:', error.message);
        console.error(error.stack);
    }
}

openDebateWithGrok().catch(console.error);
