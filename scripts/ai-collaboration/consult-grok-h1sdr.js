#!/usr/bin/env node

/**
 * Consultar a Grok sobre mejoras para H1SDR WebSDR
 */

require('dotenv').config();
const { chromium } = require('playwright');
const AIAdapters = require('./ai-adapters');

async function consultGrokH1SDR() {
    console.log('ü§ñ Claude consultando a Grok sobre H1SDR WebSDR...\n');

    let browser, adapters;

    try {
        // Conectar al navegador existente
        browser = await chromium.connectOverCDP('http://localhost:9222');
        console.log('‚úÖ Conectado a navegador\n');

        const contexts = browser.contexts();
        const context = contexts[0];
        const pages = context.pages();
        const page = pages[0];

        // Navegar a Grok si no estamos ah√≠
        if (!page.url().includes('grok.com')) {
            console.log('üìç Navegando a Grok...');
            await page.goto('https://grok.com', { waitUntil: 'load', timeout: 30000 });
            await page.waitForTimeout(5000);
        }

        console.log(`üìç En: ${page.url()}\n`);

        // Crear adaptador
        adapters = new AIAdapters(browser, page);

        // Mensaje a Grok sobre H1SDR
        const prompt = `Hola Grok, soy Claude (Anthropic). Estoy trabajando con Pablo en un proyecto de radioastronom√≠a llamado H1SDR - un WebSDR moderno para detectar la l√≠nea de hidr√≥geno a 1420 MHz y operaciones multibanda con RTL-SDR.

**Stack Actual:**
- Backend: FastAPI (Python) con WebSocket streaming
- Frontend: HTML5/WebGL para espectro + Web Audio API para demod
- DSP: FFTW-acelerado, 4096 FFT @ 20 FPS
- Hardware: RTL-SDR Blog V4 (24-1766 MHz)
- Modos: AM/FM/USB/LSB/CW/SPECTRUM

**Completado Recientemente:**
- ‚úÖ Audio continuo sin dropouts (fix de doble resampling)
- ‚úÖ 16 bandas preset (radioastronom√≠a, amateur, broadcast)
- ‚úÖ Control de frecuencia coherente (single source of truth)
- ‚úÖ Scanner FM autom√°tico
- ‚úÖ Layout resizable con controles de intensidad
- ‚úÖ Playwright automation para testing

**√Åreas Identificadas para Mejora:**
1. Recording/playback (IQ y audio)
2. Integraci√≥n scanner con an√°lisis espectral real
3. RFI rejection avanzado
4. Export FITS con WCS headers (astronom√≠a)
5. Mobile app companion
6. Multi-receiver correlation
7. ML signal classification

**Pregunta:**
¬øQu√© 5 mejoras t√©cnicas priorizar√≠as para este proyecto WebSDR de radioastronom√≠a? Considera:
- Utilidad para observaciones astron√≥micas serias
- Experiencia de usuario para radioaficionados
- Performance en tiempo real
- Innovaci√≥n t√©cnica vs complejidad

S√© conciso y pr√°ctico con ejemplos de implementaci√≥n.`;

        console.log('üì§ Enviando consulta a Grok...\n');
        console.log('‚îÅ'.repeat(60));
        console.log(prompt);
        console.log('‚îÅ'.repeat(60));
        console.log('\n‚è≥ Esperando respuesta de Grok...\n');

        const result = await adapters.grokAdapter(prompt, {
            maxRetries: 1,
            navigationTimeout: 30000,
            responseTimeout: 120000  // 2 minutos para respuesta m√°s larga
        });

        console.log('\n' + '‚ïê'.repeat(60));
        if (result.success) {
            console.log('‚úÖ RESPUESTA DE GROK:');
            console.log('‚ïê'.repeat(60));
            console.log(result.response);
            console.log('‚ïê'.repeat(60));
        } else {
            console.log('‚ùå Error:', result.error);
            console.log('‚ïê'.repeat(60));
        }

        console.log('\nüí¨ Conversaci√≥n completada.');
        console.log('   Presiona Ctrl+C para salir.\n');

        // Mantener abierto
        await new Promise(() => {});

    } catch (error) {
        console.error('\n‚ùå Error:', error.message);
        console.error(error.stack);
    }
}

consultGrokH1SDR().catch(console.error);
