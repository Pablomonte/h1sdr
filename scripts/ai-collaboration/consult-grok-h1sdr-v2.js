#!/usr/bin/env node

/**
 * Consultar a Grok sobre arquitectura H1SDR v2.0
 */

require('dotenv').config();
const { chromium } = require('playwright');
const AIAdapters = require('./ai-adapters');

async function consultGrokH1SDRv2() {
    console.log('ü§ñ Claude consultando a Grok sobre H1SDR v2.0 Architecture...\n');

    let browser, adapters;

    try {
        // Conectar al navegador existente
        browser = await chromium.connectOverCDP('http://localhost:9222');
        console.log('‚úÖ Conectado a navegador\n');

        const contexts = browser.contexts();
        const context = contexts[0];
        const pages = context.pages();
        const page = pages[0];

        // Navegar a Grok si no estamos ah√≠
        if (!page.url().includes('grok.com')) {
            console.log('üìç Navegando a Grok...');
            await page.goto('https://grok.com', { waitUntil: 'load', timeout: 30000 });
            await page.waitForTimeout(5000);
        }

        console.log(`üìç En: ${page.url()}\n`);

        // Crear adaptador
        adapters = new AIAdapters(browser, page);

        // Mensaje a Grok sobre arquitectura v2.0
        const prompt = `Hola Grok, continuemos planificando H1SDR. Bas√°ndome en tus recomendaciones anteriores (RFI rejection, FITS export, Recording, Scanner avanzado, Multi-receiver correlation), quiero arquitectar H1SDR v2.0 correctamente desde el inicio.

**OBJETIVO:** Crear una nueva versi√≥n limpia que integre todas las capacidades desde el dise√±o, no como parches.

**Componentes Actuales que FUNCIONAN BIEN (reutilizar):**
- ‚úÖ FastAPI + WebSocket streaming (s√≥lido)
- ‚úÖ FFTW DSP pipeline (r√°pido)
- ‚úÖ Web Audio API demodulaci√≥n (sin dropouts)
- ‚úÖ WebGL spectrum display (fluido)
- ‚úÖ RTL-SDR controller (estable)
- ‚úÖ 16 bandas preset config (√∫til)

**Nuevas Capacidades a Integrar desde Dise√±o:**
1. RFI rejection pipeline (SciPy adaptive filtering)
2. FITS/HDF5 export con metadata astron√≥mica
3. Recording/playback system (IQ + audio)
4. Advanced scanner con ML signal detection
5. Multi-SDR correlation engine

**PREGUNTAS CLAVE:**

**1. Arquitectura de Backend:**
- ¬øC√≥mo estructurar los m√≥dulos para que RFI, recording, correlation sean "first-class citizens" no afterthoughts?
- ¬øPatr√≥n de dise√±o recomendado? (¬øPipeline? ¬øPlugin architecture? ¬øMicroservices?)
- ¬øC√≥mo manejar m√∫ltiples streams de datos (raw IQ, filtered, audio, recorded)?

**2. Data Flow:**
- ¬øC√≥mo dise√±ar el flujo: RTL-SDR ‚Üí RFI filter ‚Üí FFT ‚Üí Demod ‚Üí Recording ‚Üí Export?
- ¬øD√≥nde insertar taps para recording sin afectar performance real-time?
- ¬øQu√© formato intermedio usar? (NumPy arrays? Protocol buffers? Arrow?)

**3. Storage Architecture:**
- ¬øHDF5 vs FITS vs ambos? ¬øCu√°ndo usar cada uno?
- ¬øC√≥mo estructurar archivos para b√∫squedas r√°pidas de observaciones?
- ¬øMetadata schema para astronomy + amateur radio use cases?

**4. Frontend Integration:**
- ¬øC√≥mo exponer nuevas features en UI sin sobrecargar?
- ¬øWebWorkers para processing pesado?
- ¬øQu√© datos enviar por WebSocket vs REST?

**5. Development Roadmap:**
- ¬øQu√© implementar primero para tener "walking skeleton" funcional?
- ¬øC√≥mo migrar datos/configuraciones desde v1?
- ¬øEstrategia de testing para cada m√≥dulo?

**ENTREGABLE DESEADO:**
- Estructura de directorios propuesta
- Diagrama de arquitectura (texto/ASCII)
- Orden de implementaci√≥n (fases)
- Decisiones t√©cnicas clave justificadas
- C√≥digo skeleton para m√≥dulos core

S√© detallado pero pragm√°tico. Prioriza simplicidad y mantenibilidad sobre features innecesarias.`;

        console.log('üì§ Enviando consulta a Grok...\n');
        console.log('‚îÅ'.repeat(60));
        console.log(prompt);
        console.log('‚îÅ'.repeat(60));
        console.log('\n‚è≥ Esperando respuesta de Grok...\n');

        const result = await adapters.grokAdapter(prompt, {
            maxRetries: 1,
            navigationTimeout: 30000,
            responseTimeout: 180000  // 3 minutos para respuesta detallada
        });

        console.log('\n' + '‚ïê'.repeat(60));
        if (result.success) {
            console.log('‚úÖ RESPUESTA DE GROK:');
            console.log('‚ïê'.repeat(60));
            console.log(result.response);
            console.log('‚ïê'.repeat(60));
        } else {
            console.log('‚ùå Error:', result.error);
            console.log('‚ïê'.repeat(60));
        }

        console.log('\nüí¨ Conversaci√≥n completada.');
        console.log('   Presiona Ctrl+C para salir.\n');

        // Mantener abierto
        await new Promise(() => {});

    } catch (error) {
        console.error('\n‚ùå Error:', error.message);
        console.error(error.stack);
    }
}

consultGrokH1SDRv2().catch(console.error);
